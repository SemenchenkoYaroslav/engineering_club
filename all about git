Чому варто використовувати GIT:
1. Дозволяє зберігати різні версії проєктів
2. Швидкий перехід між різними версіями проєктів
3. Відкат до попередніх версій при необхідності
4. Покращує процес командної роботи над одним і тим проєктом
5. Незалежна одночасна розробка різних нових функцій в проєкті

Різниця між GIT та GIT hub

GIT - централізована система для роботи з репозиторіями. Встановлюється на компʼютер або сервер. Не має можливості працювати командою.

GIT hub - децентралізований сервіс хостингу GIT репозиторіїв. Встановлюється як окрема програма, та дозволяє працювати командою. При зміні компʼютера є можливість доступу до репозиторіїв.

Чому GIT розподілена система? Тому що на кожному компʼютері знаходиться повна версія репозиторію. Можна працювати з GIT репозиторіями локально навіть без інтернету.

Команди GIT:
1. git —version перевірка версії GIT
2. git config зміна конфігурації —global імʼя буде налаштовано глобально для всіх репозиторіїв user.name налаштування імені <…>імʼя
3. git config зміна конфігурації —global пошта буде налаштована глобально для всіх репозиторіїв user.email налаштування пошти <…> пошта
4. git config —list отримання списку всіх налаштувань 
5. cd ~/Desktop перехід в папку
6. mkdir my-project створити папку
7. cd my-project перехід в нову папку
8. echo "hello qa" > file.txt створення файлу з текстом
9. ls список файлів в папці
10. cat file.txt читання файлу
11. rm file.txt видалення файлу
12. pwd подивитися повний шлях до папки
13. cd .. повернутися на рівень вище
14. git init створення нового репозиторію (вводиться в тій папці в якій хочемо створити репозиторій)
15. ls -la відображення прихованих папок
16. git add підготовлює файли для переміщення з РОБОЧОЇ ДИРЕКТОРІЇ в ІНДЕКС 
17. git commit зберігає файли з ІНДЕКСУ в РЕПОЗИТОРІЙ
18. git checkout дозволяє переходити до певної версії

СТАТУСИ ВІДСЛІДКОВУВАННЯ ФАЙЛІВ

Untracked (невідслідковуваний) може переходити в статус staged після вводу команди git add
Unmodified (немодифікований) одні й ті ж самі файли які знаходяться в РОБОЧІЙ ДИРЕКТОРІЇ, ІНДЕКСІ та РЕПОЗИТОРІЇ
Modified (модифікований)
Staged (підготовлений)


ТИПИ ОБ`ЄКТІВ GIT

￼

Коміт - це вказівник на дерево

ОСНОВНІ КОМАНДИ GIT:
1. git status відображає теперішній стан git репозиторію. Покаже які файли були змінені або додані
2. git add <files> підготовка файлів перед комітом
3. git commit -m <massage> створення коміту з записом змін в репозиторій
4. git log перегляд історії змін (комітів)
5. git checkout <commit hash> перехід до певної версії проєкту по (SHA1 хешу коміта)
6. git checkout <branch name> перехід до певної версії проєкту по назві гілки
7. git add . додає всі файли в ІНДЕКС
8. git cat-file -t (sha1 hash) дозволяє прочитати тип файлу по хешу обʼєкту
9. git cat-file -p (sha1 hash) дозволяє прочитати інформацію в обʼєкті (blob, tree, commit…)
10. git branch <назва гілки> створює нову гілку
11. git checkout -b <назва гілки (branch name)> створює гілку і переходить в неї
12. git branch показує список всіх гілок в проєкті
13. git branch -m <new branch name> перейменовує гілку
14. git branch -d <branch name> видалення гілки (поточну гілку видалити не можливо, потрібно перейти на іншу гілку)
15. git merge <frature branch name> зливання іншої (feature branch) гілки в поточну (receiving branch) гілку

ПРОЦЕС ЗЛИВАННЯ ГІЛОК

1. Створити нову гілку (first-branch) з гілки (main)
2. Перейти в нову гілку (first-branch)
3. Внести зміни в проєкт (створити нові файли, папки, змінити існуючі)
4. Створити commit або декілька комітів в гілці first-branch
5. Перейти в гілку main і також створити декілька комітів (якщо потрібно)
6. Виконати зливання гілки first-branch в гілку main
7. Після зливання гілку first-branch можна видаляти  

Гілка - це посилання на коміт   


ВЗАЄМОДІЯ МІЖ GIT та GIThub

1. git clone <url> клонування віддаленого репозиторію в локальний
2. git branch -a показує всі гілки які знаходяться на віддалених репозиторіях
3. git checkout <branch name> дозволяє перейти на любу гілку навіть на відділених репозиторіях
4. git pull завантажує і переміщає зміни з віддаленої гілки в локальну 
5. git push завантажує зміни з локальної гілки в гілку віддаленого рапозиторію
6. git remote add origin <url> підключення віддаленого репозиторія 
7. git push -u origin <branch name> завантажує зміни з локальної гілки в віддалену із створенням звʼязку між ними
8. git remote -v перевіряє налаштування серверу
9. git branch -vv показує як звʼязана локальна гілка з віддаленою гілкою
10. 
